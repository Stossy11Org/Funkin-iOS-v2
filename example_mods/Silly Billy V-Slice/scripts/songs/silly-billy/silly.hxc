import funkin.play.song.Song;
import funkin.play.PlayState;
import funkin.play.Countdown;
import funkin.Paths;
import funkin.graphics.FunkinSprite;
import funkin.audio.FunkinSound;
import flixel.util.FlxTimer;
import funkin.ui.debug.charting.util.ChartEditorDropdowns;
import funkin.play.PauseSubState;
import funkin.util.Constants;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.FlxSprite;
import flixel.FlxCamera;
import flixel.FlxCameraFollowStyle;
import flixel.FlxG;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;
import hxcodec.flixel.FlxVideoSprite;
import flixel.addons.display.FlxRuntimeShader;
import openfl.filters.ShaderFilter;
import openfl.utils.Assets;
import Std;

class SillyBilly extends Song
{
    var game;

    var blueShader = new FlxRuntimeShader(Assets.getText(Paths.frag("blue")), null);
    var shader = new ShaderFilter(blueShader);

    var isVideoPlaying:Bool = false;
    var camMirror:FlxCamera;

    var mirror:FunkinSprite;
    var vig:FunkinSprite;
    var bars:FunkinSprite;    
    var blackScreen:FunkinSprite;
    
    var lyrics:FlxText;

    var introVid:FlxVideoSprite;
    var myWayVid:FlxVideoSprite;

    var camZoomTween:FlxTween;
    
    var isSmall:Bool = false;
    var firstLoad:Bool = true;
    
    var defaultPlayerStrumX;

	public function new()
    {
        super('silly-billy');
    }    

    public function onCreate(ev):Void {
        super.onCreate(ev);

        game = PlayState.instance;

        blueShader.setFloat('hue', 1.3);
        blueShader.setFloat('pix', 0.00001);

        Constants.STRUMLINE_X_OFFSET = 95;
        /*
        ChartEditorDropdowns.NOTE_KINDS = [
            // Base
            "" => "Default",
            // Silly
            "altbf" => "Alternate BF (Silly Billy)",
            "small" => "Small Yourself (Silly Billy)"
          ];*/

        PauseSubState.musicSuffix = '-urself';
        PauseSubState.MUSIC_FINAL_VOLUME = 0.25;

        camMirror = new FlxCamera(0, 0, 1280, 720, 1);
        camMirror.bgColor = 0x000000000;
        
        FunkinSprite.preparePurgeCache();
        FunkinSprite.cacheTexture(Paths.image('bg/broken_mirror'));
        
        mirror = FunkinSprite.create(0, 0, 'bg/silly_mirror');
        mirror.loadTexture('bg/silly_mirror');
        mirror.zIndex = 1;
        mirror.x -= 400;
        mirror.y -= 750;
        mirror.useColorTransform = true;
        mirror.cameras = [camMirror];
        game.add(mirror);
        
        game.comboPopUps.visible = false;
        if (game.currentStage != null) game.currentStage.getGirlfriend(true);

        vig = FunkinSprite.create(0, 0, 'vignette');
        vig.screenCenter();
        vig.zIndex = 250;
        vig.cameras = [game.camHUD];
        game.add(vig);
        
        bars = FunkinSprite.create(0, 0, 'bars');
        bars.screenCenter();
        bars.zIndex = 350;
        bars.cameras = [game.camHUD];
        game.add(bars);
        
        lyrics = new FlxText(0, 0, 400, "", 48);
        lyrics.setFormat(Paths.font("Times New Roman.ttf"), 48, 0xFFcfa92d, 'center', FlxTextBorderStyle.OUTLINE, 0xFF000000);
        lyrics.screenCenter(0x01);
        lyrics.borderSize = 2;
        lyrics.cameras = [game.camHUD];
        lyrics.y = FlxG.height - lyrics.height + 4;
        lyrics.zIndex = 400;
        game.add(lyrics);

        blackScreen = new FunkinSprite(0, 0);
        blackScreen.makeSolidColor(FlxG.width * 2, FlxG.height * 2, 0xFF000000);
        blackScreen.updateHitbox();
        blackScreen.scrollFactor.set();
        blackScreen.cameras = [game.camHUD];
        blackScreen.screenCenter();
        blackScreen.alpha = 0;
        blackScreen.zIndex = 200;
        game.add(blackScreen);

        game.refresh();

        game.camGame.bgColor = 0x00000000;
        insertFlxCamera(FlxG.cameras.list.indexOf(game.camGame), camMirror, false);

        camMirror.follow(game.cameraFollowPoint, FlxCameraFollowStyle.LOCKON, 0.04);
    }   
    
    public function onGameOver(ev):Void {
        super.onGameOver(ev);

        if (introVid != null) introVid.destroy();
        if (myWayVid != null) myWayVid.destroy();
        game.camGame.filters = [];  
        game.camHUD.filters = [];
    }
    
    public function onDestroy(ev):Void {
        super.onDestroy(ev);

        if (introVid != null) introVid.destroy();
        if (myWayVid != null) myWayVid.destroy();
    }

    public function onUpdate(eve):Void {
        super.onUpdate(eve);

        camMirror.zoom = game.camGame.zoom;
        camMirror.targetOffset = FlxG.camera.targetOffset;
    }    
    
	public function onPause(event) {
        super.onPause(event);

        if (introVid != null) introVid.pause();
        if (myWayVid != null) myWayVid.pause();
    }
    
	public function onResume(event) {
        super.onResume(event);

        if (introVid != null) introVid.resume();
        if (myWayVid != null) myWayVid.resume();
    }

    public function onSongRetry(ev):Void{
        super.onSongRetry(ev);

        if (introVid != null) introVid.destroy();
        
        //FlxG.resetState();
    }

    public function onSongEnd(ev):Void{
        super.onSongEnd(ev);

        game.camGame.filters = [];  
        game.camHUD.filters = [];
        camMirror.filters = [];
    }

    public function onCountdownStart(event):Void {
        super.onCountdownStart(event);

        isSmall = false;
        defaultPlayerStrumX = game.playerStrumline.x;
        new FlxTimer().start(0.000001, function(tmr) // Starts the song without countdown
            {
                Countdown.skipCountdown();
        
                openingVideo();
                myWayVideo();
            });
    }

    public function onSongEvent(event):Void 
    {
        super.onSongEvent(event);

        if (event.eventData.eventKind == 'PlayAnimation') {
            var ev = event.eventData.value;

            //alt sing when small
            switch (Std.string(ev.anim))
            {
                case 'shrink': 
                    isSmall = true;
                    trace('lookalike currently small = ' + isSmall);
                case 'unshrink': 
                    isSmall = false;
                    trace('lookalike currently small = ' + isSmall);
            }                
        }
        
		if (event.eventData.eventKind == 'SillyEvents') {
			var ev = event.eventData.value;

            var floatVal1 = Std.parseFloat(ev.floatVal);
            var floatVal2 = Std.parseFloat(ev.floatVal2);
            if (ev.floatVal2 == null) floatVal2 = 0.25;

			//alt sing when small
			switch (Std.int(ev.sillyType))
			{
                case 1: //my waaay vid
                    myWayVid.play('mods/Silly Billy V-Slice/videos/SO_STAY_FINAL.mp4', false);
                    myWayVid.bitmap.time = 0;
                    FlxTween.tween(myWayVid, {alpha: 1}, 0.125 * 1.5, {ease: FlxEase.quadOut});
                case 2: //mirror brek
                    mirror.loadTexture('bg/broken_mirror');
                    FlxTween.num(255, 0, 1.75, {ease: FlxEase.quadOut, onUpdate: function(twn) {
                        mirror.setColorTransform(1,1,1,1,twn.value,twn.value,twn.value,0); 
                    }});
                    game.camGame.shake(0.01, 0.25);
                    camMirror.shake(0.01, 0.25);
                    FunkinSound.playOnce(Paths.sound("mirror_break"), 2);
				case 3: //lyrics
                    lyrics.text = Std.string(ev.stringVal);
                case 4: //hide huds
                    FlxTween.tween(game.scoreText, {alpha: 0}, 2, {ease: FlxEase.quadIn});
                    FlxTween.tween(game.playerStrumline, {alpha: 0}, 2, {ease: FlxEase.quadIn});
                case 5: //middlescroll strum
		            if (game.playerStrumline != null) FlxTween.tween(game.playerStrumline, {x: (FlxG.width -  game.playerStrumline.width) * 0.5}, 0.1, {ease: FlxEase.linear});
                    FlxTween.tween(game.playerStrumline, {alpha: 1}, 1.5, {ease: FlxEase.quadOut});
                case 6: //blackscreen
                    FlxTween.tween(blackScreen, {alpha: 1}, 1.125, {ease: FlxEase.quadOut});
                    camZoomTween = FlxTween.tween(game, {currentCameraZoom: 1.4}, 1, {ease: FlxEase.backIn});
                case 7: //hurt
                    if (game.health > 0.5) game.health -= 0.05;
                case 9: //zoom add
                    if (camZoomTween != null) camZoomTween.cancel();
                    camZoomTween = FlxTween.tween(game, {currentCameraZoom: game.currentCameraZoom + floatVal1}, floatVal2, {ease: FlxEase.quartOut});
				case 10: //camera bopp
					game.cameraBopMultiplier = (Constants.DEFAULT_BOP_INTENSITY - 1.0) * floatVal1 + 1.05;
					game.camHUD.zoom += (Constants.DEFAULT_BOP_INTENSITY - 1.0) * (floatVal1 * game.defaultHUDCameraZoom) * 2;
                case 11: //my way done
                    FlxTween.tween(game.playerStrumline, {x: defaultPlayerStrumX}, 2, {ease: FlxEase.quadOut});
                    game.camGame.flash(0xFF000000, 2);   
                    game.camGame.filters = [shader];  
                    game.camHUD.filters = [shader];
                    camMirror.filters = [shader];
                case 12: //instant blackscreen
                    blackScreen.alpha = 1;
                    blackScreen.visible = true;
                case 13: //zoom set (not really)
                    if (camZoomTween != null) camZoomTween.cancel();
                    camZoomTween = FlxTween.tween(game, {currentCameraZoom: game.currentCameraZoom + (floatVal1 * 0.45)}, floatVal2, {ease: FlxEase.quartOut});
			}                
		}
    }
    
    public function onNoteIncoming(ev):Void {
        super.onNoteIncoming(ev);

        if (!ev.note.noteData.getMustHitNote() && isSmall) ev.note.kind = 'small';
    }

    function openingVideo() {
        introVid = new FlxVideoSprite(0, 0);
        game.cameraZoomRate = 0;

        if (introVid != null) {
            introVid.zIndex = 2001;
            introVid.cameras = [game.camHUD];
            introVid.antialiasing = true;
            introVid.autoPause = false;
        
            game.add(introVid);
            game.refresh();
            introVid.play('mods/Silly Billy V-Slice/videos/open.mp4', false);
        
            introVid.bitmap.onTextureSetup.add(() -> {
                introVid.setGraphicSize(FlxG.width, FlxG.height);
                introVid.updateHitbox();
                introVid.x = 0;
                introVid.y = 0;
            });
            
            introVid.bitmap.onEndReached.add(() -> {        
                game.cameraZoomRate = Constants.DEFAULT_ZOOM_RATE;
                game.currentCameraZoom = 1.125;
                game.camHUD.zoom = 1.25;  
                game.camHUD.alpha = 0;  
                game.camGame.flash(0xFF000000, 0.25);  
                FlxTween.tween(game.camHUD, {alpha: 1}, 0.75, {ease: FlxEase.quartOut});
                FlxTween.tween(game, {currentCameraZoom: 0.625}, 2, {ease: FlxEase.quartOut});
                
                introVid.destroy();
            });
        }
    }

    function myWayVideo() {
        myWayVid = new FlxVideoSprite(0, 0);

        if (myWayVid != null) {
            myWayVid.zIndex = 300;
            myWayVid.cameras = [game.camHUD];
            myWayVid.antialiasing = true;
            myWayVid.autoPause = false;
            myWayVid.alpha = 0;
        
            game.add(myWayVid);
            game.refresh();
        
            myWayVid.bitmap.onTextureSetup.add(() -> {
                myWayVid.setGraphicSize(FlxG.width, FlxG.height);
                myWayVid.updateHitbox();
                myWayVid.x = 0;
                myWayVid.y = 0;
            });
            
            myWayVid.bitmap.onEndReached.add(() -> {        
                game.currentCameraZoom = 1.5;
                game.camGame.flash(0xFF000000, 2); 
                blackScreen.alpha = 0; 
                FlxTween.tween(game.camHUD, {alpha: 1}, 0.75, {ease: FlxEase.quartOut});
                new FlxTimer().start(0.1, function(tmr)
                    {
                        FlxTween.tween(game, {currentCameraZoom: 0.625}, 2, {ease: FlxEase.quartOut});
                    });
                
                myWayVid.destroy();
            });
        }
    }

    function insertFlxCamera(idx:Int,cam:FlxCamera,defDraw:Bool) {
        var cameras = [
            for (i in FlxG.cameras.list) {
                cam: i,
                defaultDraw: FlxG.cameras.defaults.contains(i)
            }
        ];
    
        for(i in cameras) FlxG.cameras.remove(i.cam, false);
    
        cameras.insert(idx, {cam: cam,defaultDraw: defDraw});
    
        for (i in cameras) FlxG.cameras.add(i.cam,i.defaultDraw);
    
    }
}